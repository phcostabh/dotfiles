#!/bin/bash

# apt-fast
alias apt-get="apt-fast"

# Packages management
alias clean="sudo apt-fast autoremove; sudo apt-fast autoclean; sudo apt-fast purge; sudo apt-fast clean"
alias update="sudo apt-fast update --quiet; sudo apt-fast upgrade --yes"
alias unlockdpkg="sudo fuser -vik /var/lib/dpkg/lock; sudo dpkg --configure -a"
alias cleanpackages="sudo dpkg --get-selections | grep deinstall | sed 's/\t\+.*//g' | xargs sudo dpkg --purge 2> /dev/null"
alias ducks='du -hsx * | sort -rh | head -10'

# Tmux
alias tmux="TERM=screen-256color-bce tmux"

# Ruby
alias uninstallgems="gem list | cut -d' ' -f1 | xargs gem uninstall -aIx"

# Helper Functions
function untar () {
    7z e $1
}

function authme {
    [[ -e ~/.ssh/id_rsa.pub ]] && ssh-copy-id -i ~/.ssh/id_rsa.pub "$1"
}

function take () {
    mkdir $1
    cd $1
}

function generate-hash {
    echo -n "$1$(date +%d%m%Y%H%M%S%N)" | openssl sha1 | awk '{ print $2 }'
}

function list-ppa {
    for APT in `find /etc/apt/ -name \*.list`; do
        grep -o "^deb http://ppa.launchpad.net/[a-z0-9\-]\+/[a-z0-9\-]\+" $APT | while read ENTRY ; do
            USER=`echo $ENTRY | cut -d/ -f4`
            PPA=`echo $ENTRY | cut -d/ -f5`
            echo sudo apt-add-repository ppa:$USER/$PPA
        done
    done
}

function search {
    find -name "*.$2" -type f -exec egrep -n -H --color "$1" {} \;
}

function tmux-colors {
    for i in {0..255} ; do
        printf "\x1b[38;5;${i}mcolour${i}\n"
    done
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0  ]; then # argument
        python -mjson.tool <<< "$*"
    else # pipe
        python -mjson.tool
    fi;
}

function clean-images () {
    docker rmi -f $(docker images -a -f dangling=true -q)
}

function clean-containers () {
    docker rm -f $(docker ps -a -f status=exited -q)
}

function godeps () {
    go list -f '{{join .Deps "\n"}}' | xargs go list -f '{{ if not .Standard }}{{ .ImportPath }}{{ end }}'
}

function randompwd() {
    if [ ! -z "$1" ];  then
        length=$1
    else
        length=20
    fi

    env LC_CTYPE=C tr -dc "a-zA-Z0-9" < /dev/urandom | head -c "$length"
}

alias ports='netstat -tulanp'
alias mount='mount |column -t'
alias path='echo -e ${PATH//:/\\n}'

platform=$(uname -s | tr '[:upper:]' '[:lower:]')

if [ "$platform" == "darwin" ]; then
    # Get OS X Software Updates and Homebrew
    alias update='sudo softwareupdate -i -a; brew update; brew upgrade; brew cleanup'
    function authme () {
        ssh $@ 'cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub
    }
fi

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
    colorflag="--color"
else # OS X `ls`
    colorflag="-G"
fi

# List all files colorized in long format
alias l="ls -lF ${colorflag}"

# List all files colorized in long format, including dot files
alias la="ls -laF ${colorflag}"

# List only directories
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"

# Always use color output for `ls`
alias ls="command ls ${colorflag}"
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

alias docker-cleancontainers='for x in $(docker ps -aq); do docker rm -f $x; done'
alias docker-cleanimages='for x in $(docker images | awk '"'"'$1 ~ "<none>" {print $3}'"'"'); do docker rmi $x; done'
alias docker-killall='for x in $(docker ps -aq); do docker kill $x; done'
alias docker-clean="docker-cleancontainers && docker-cleanimages"

# runs docker exec in the latest container
function docker-exec-last {
  docker exec -ti $( docker ps -a -q -l) /bin/bash
}

function docker-get-ip {
  # Usage: docker-get-ip (name or sha)
  [ -n "$1" ] && docker inspect --format "{{ .NetworkSettings.IPAddress }}" $1
}

function docker-get-id {
  # Usage: docker-get-id (friendly-name)
  [ -n "$1" ] && docker inspect --format "{{ .ID }}" "$1"
}

function docker-get-image {
  # Usage: docker-get-image (friendly-name)
  [ -n "$1" ] && docker inspect --format "{{ .Image }}" "$1"
}

function docker-get-state {
  # Usage: docker-get-state (friendly-name)
  [ -n "$1" ] && docker inspect --format "{{ .State.Running }}" "$1"
}

function docker-memory {
  for line in `docker ps | awk '{print $1}' | grep -v CONTAINER`; do docker ps | grep $line | awk '{printf $NF" "}' && echo $(( `cat /sys/fs/cgroup/memory/docker/$line*/memory.usage_in_bytes` / 1024 / 1024 ))MB ; done
}

# keeps the commmand history when running a container
function basher() {
    if [[ $1 = 'run' ]]
    then
        shift
        docker run -e HIST_FILE=/root/.bash_history -v $HOME/.bash_history:/root/.bash_history "$@"
    else
        docker "$@"
    fi
}
# backup files from a docker volume into /tmp/backup.tar.gz
function docker-volume-backup-compressed() {
  docker run --rm -v /tmp:/backup --volumes-from "$1" debian:jessie tar -czvf /backup/backup.tar.gz "${@:2}"
}
# restore files from /tmp/backup.tar.gz into a docker volume
function docker-volume-restore-compressed() {
  docker run --rm -v /tmp:/backup --volumes-from "$1" debian:jessie tar -xzvf /backup/backup.tar.gz "${@:2}"
  echo "Double checking files..."
  docker run --rm -v /tmp:/backup --volumes-from "$1" debian:jessie ls -lh "${@:2}"
}
# backup files from a docker volume into /tmp/backup.tar
function docker-volume-backup() {
  docker run --rm -v /tmp:/backup --volumes-from "$1" busybox tar -cvf /backup/backup.tar "${@:2}"
}
# restore files from /tmp/backup.tar into a docker volume
function docker-volume-restore() {
  docker run --rm -v /tmp:/backup --volumes-from "$1" busybox tar -xvf /backup/backup.tar "${@:2}"
  echo "Double checking files..."
  docker run --rm -v /tmp:/backup --volumes-from "$1" busybox ls -lh "${@:2}"
}
