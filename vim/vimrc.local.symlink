" Base configuration {
    set timeoutlen=300                              " mapping timeout
    set ttimeoutlen=50                              " keycode timeout
    set mouse=a                                     " enable mouse
    set mousehide                                   " hide when characters are typed
    set history=1000                                " number of command lines to remember
    set ttyfast                                     " assume fast terminal connection
    set viewoptions=folds,options,cursor,unix,slash " unix/windows compatibility
    set encoding=utf-8                              " set encoding for text
    if exists('$TMUX')
        set clipboard=
    else
        set clipboard=unnamed                       " sync with OS clipboard
    endif
    set hidden                                      " allow buffer switching without saving
    set autoread                                    " auto reload if file saved externally
    set nrformats-=octal                            " always assume decimal numbers
    set showcmd
    set whichwrap+=<,>,h,l,[,]
    set tags=tags;/
    set showfulltag
    set modeline
    set modelines=5
" }

" Basic mappings {
    let mapleader=","
    let g:mapleader=","
    nnoremap ; :
" }

" Functions {
    " Strip trailing whitepaces
    function! <SID>StripTrailingWhitespaces()
        " Preparation: save last search, and cursor position.
        let _s=@/
        let l = line(".")
        let c = col(".")
        " Do the business:
        %s/\s\+$//e
        " Clean up: restore previous search history, and cursor position
        let @/=_s
        call cursor(l, c)
    endfunction

    " Surround visual selections with quotes
    function! Quote(quote)
        let save = @"
        silent normal gvy
        let @" = a:quote . @" . a:quote
        silent normal gvp
        let @" = save
    endfunction

    " Ensure a dir exists
    function! EnsureDirExists(dir)
        if !isdirectory(a:dir)
            if exists("*mkdir")
                call mkdir(a:dir,'p')
                echo "Created directory: " . a:dir
            else
                echo "Please create directory: " . a:dir
            endif
        endif
    endfunction

    " Toggle relativenumber and number
    function! ToggleNumbering()
        if &relativenumber
            set number
            set norelativenumber
        else
            set relativenumber
            set nonumber
        endif
    endfunc

    " Remove Bundles
    function! UnBundle(arg, ...)
      let bundle = vundle#config#init_bundle(a:arg, a:000)
      call filter(g:bundles, 'v:val["name_spec"] != "' . a:arg . '"')
    endfunction

    com! -nargs=+         UnBundle
    \ call UnBundle(<args>)
" }

" Vim Backup {
    set backupdir=~/.vim/.cache/backup
    set directory=~/.vim/.cache/swap
    set undodir=~/.vim/.cache/undo

    set backup
    set swapfile

    call EnsureDirExists(&backupdir)
    call EnsureDirExists(&directory)
    call EnsureDirExists(&undodir)

    if has('persistent_undo')
        set undofile
        set undolevels=1000
        set undoreload=10000
    endif
" }

" Basic Mappings {
    nnoremap <C-a> ggvG$            " Select all
    inoremap <C-v> <ESC> " +gpa<CR> " Ctrl + v compatilibility
    vnoremap <C-c> " +y<CR>         " Ctrl + c compatilibility
    vnoremap <C-x> " +x<CR>         " Ctrl + x compatilibility
    " Sorrounding mappings
    nnoremap <leader>" ciw""<esc>hp<esc>el
    nnoremap <leader>' ciw''<esc>hp<esc>el
    nnoremap <leader>( ciw()<esc>hp<esc>el
    nnoremap <leader>[ ciw[]<esc>hp<esc>el
    nnoremap <leader>{ ciw{}<esc>hp<esc>el
    vmap <silent> <Leader>' :call Quote("'")<CR>
    vmap <silent> <Leader>" :call Quote('"')<CR>
    nmap <S-h> :tabprevious <CR>              " Move to the tab at the right
    nmap <S-l> :tabnext <CR>                  " Move to the tab at the left
    map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR> " Find merge conflict markers
    noremap <leader>n :call ToggleNumbering()<cr>
" }

" UI Configuration {
    colorscheme jellybeans
    set guifont=Droid\ Sans\ Mono\ 09
    set nospell
    set t_Co=256
    set nofoldenable
    set showmatch
    set nohidden
    highlight clear SignColumn   " SignColumn should match background
    highlight clear LineNr       " Current line number row will have same background color in relative mode
    highlight normal ctermbg=none
    highlight nontext ctermbg=none
" }

" vim-php-cs-fixer configuration {
    autocmd FileType php noremap <buffer>  <c-f> :call PhpCsFixerFixFile()<cr>
" }

" js-beautify {
    map <Leader>r :!js-beautify -r "%"<CR>:update<CR>
" }

" Integrating with powerline fonts {
    let g:airline_powerline_fonts = 1
" }

" Disable auto PHPFolding {
    let g:DisableAutoPHPFolding = 1
" }

" Striping whitespaces {
    autocmd BufWritePre *.* :call <SID>StripTrailingWhitespaces()
" }

" Remove Bundles {
    UnBundle 'daylerees/colour-schemes'
" }

" fullscreen mode for GVIM and Terminal, need 'wmctrl' in you PATH {
    map <silent> <F11> :call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")<CR>
" }

" Commit messages {
    autocmd Filetype gitcommit setlocal spell textwidth=80
" }
